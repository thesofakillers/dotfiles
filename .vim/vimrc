
" plugins {{{

"Load plugins here (vim-plug or pathogen or vundle)
call plug#begin('~/.vim/plugged')
Plug 'gruvbox-community/gruvbox'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Chiel92/vim-autoformat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive' 
Plug 'tpope/vim-abolish'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'honza/vim-snippets' "i use coc-snippets as the engine
Plug '907th/vim-auto-save'
Plug 'cespare/vim-toml'
Plug 'vmchale/dhall-vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'mhinz/vim-signify'
Plug 'ptzz/lf.vim'
Plug 'rbgrouleff/bclose.vim'
Plug 'neoclide/jsonc.vim'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'gisphm/vim-gitignore'
call plug#end()
" }}}

" generic settings {{{

" Don't try to be vi compatible
set nocompatible
" Helps force plugins to load correctly when it is turned back on below
filetype off
" Turn on syntax highlighting
syntax on
" For plugins to load correctly
filetype plugin indent on
"Pick a leader key
nnoremap <SPACE> <Nop>
let mapleader = "\<Space>"
" Security
set modelines=0
" Show line numbers
set number
" Show file stats
set ruler
" Blink cursor on error instead of beeping
set visualbell
" Encoding
set encoding=utf-8
" Whitespace
set wrap
set textwidth=79
set colorcolumn=79
set formatoptions=tcqrn1
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set noshiftround
set autoindent
" Cursor motion
set scrolloff=3
set backspace=indent,eol,start
set matchpairs+=<:> " use % to jump between pairs
runtime! macros/matchit.vim
" Move up/down editor lines
nnoremap j gj
nnoremap k gk
" Allow hidden buffers
set hidden
" Rendering
set ttyfast
" Status bar
set laststatus=2
" Last line
set showmode
set showcmd
" Searching
nnoremap / /\v
vnoremap / /\v
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
map <leader><space> :let @/=''<cr> " clear search
" Spelling
set spell spelllang=en,it
set spellfile=$HOME/.vim/spell/en.utf-8.add,$HOME/.vim/spell/it.utf-8.add
set spellsuggest=fast
" Formatting
map <leader>q gwip
" Visualize tabs and newlines
set listchars=tab:▸\ ,eol:¬
" Or use your leader key + l to toggle on/off
map <leader>l :set list!<CR> " Toggle tabs and EOL
" Color scheme (terminal)
set t_Co=256
set background=dark
set termguicolors
" Support for italics in gruvbox
" see https://github.com/morhetz/gruvbox/issues/119#issuecomment-226307772
let g:gruvbox_italic=1
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
colorscheme gruvbox
" folding
set foldmethod=marker
" mouse settings
set mouse=a
if !has('nvim')
  set ttymouse=xterm2
endif
" https://vim.fandom.com/wiki/How_to_not_move_cursor_when_selecting_window_with_mouse
augroup NO_CURSOR_MOVE_ON_FOCUS
  au!
  au FocusLost * let g:oldmouse=&mouse | set mouse=
  au FocusGained * if exists('g:oldmouse') | let &mouse=g:oldmouse | unlet g:oldmouse | endif
augroup END
" statusline
set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P
set statusline+=%=%{FugitiveStatusline()}
set statusline+=\ %{coc#status()} 
set pyxversion=3
" }}}

" git (fugitive) settings {{{
nmap <silent><leader>gg :Gblame<CR>
" https://github.com/tpope/vim-fugitive/issues/1387#issuecomment-611313792
nmap <leader>gp :0,3Git blame<CR>
" }}}

" {{{ python settings
" for checkhealth
let g:python_host_prog = '~/miniconda3/envs/neovim2/bin/python'
let g:python3_host_prog = '~/miniconda3/envs/neovim3/bin/python'
" black-style linewidth
au BufRead,BufNewFile *.py setlocal textwidth=88
au BufRead,BufNewFile *.py setlocal colorcolumn=88
" }}}

" {{{ json settings
autocmd BufRead,BufNewFile   *.json setlocal foldmethod=syntax 
" }}}

" markdown settings {{{
" vim-markdown settings {{{
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_toml_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 2
let g:vim_markdown_folding_level = 2
let g:vim_markdown_strikethrough = 0
let g:vim_markdown_math = 1
" }}}

" useful pandoc shortcuts {{{
autocmd FileType markdown nnoremap <buffer> <leader>b :w<CR>:silent 
      \ !pandoc <C-r>=expand('%:r')<CR>.md -F pandoc-crossref -C -o <C-r>=expand('%:r')<CR>.pdf<CR>
" }}}
" }}}

" vim-autoformat settings {{{
let g:autoformat_autoindent = 0
let g:autoformat_retab = 0
let g:autoformat_remove_trailing_spaces = 0
" }}}

"coc settings {{{
" language options{{{
" python interpreter selectioan (conda) {{{
" https://github.com/neoclide/coc-python/issues/55#issuecomment-617499047
if $CONDA_PREFIX == ""
  let s:current_python_path=$CONDA_PYTHON_EXE
else
  let s:current_python_path=$CONDA_PREFIX.'/bin/python'
endif
call coc#config('python', {'pythonPath': s:current_python_path})
" }}}
" }}}
" other options {{{
" show documentation for the word under the cursor
nnoremap <silent> K :call CocAction('doHover')<CR>
" goto actions
nmap <silent><leader>gd <Plug>(coc-definition)
nmap <silent><leader>gy <Plug>(coc-type-definition)
nmap <silent><leader>gr <Plug>(coc-references)
" navigate errors
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" show diagnostics 
nnoremap <silent> <space>d :<C-u>CocList diagnostics<cr>
" code actions (like auto import fix)
nmap <leader>do <Plug>(coc-codeaction)
" symbol renaming
nmap <leader>rn <Plug>(coc-rename)
" formatting
nmap <leader>af <Plug>(coc-format)
" }}}
" snippets {{{
inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<C-g>u\<TAB>"
" }}}
" {{{ completion sources
let g:coc_sources_disable_map = {'markdown': ['around', 'buffer']}
" }}}
" highlighting {{{
autocmd CursorHold * silent call CocActionAsync('highlight')
highlight CocHighlightText ctermbg=DarkGray ctermfg=LightGrey guibg=#444444
                                                            \ guifg=#bcbcbc
" }}}
" }}}

" {{{ LaTeX settings
" building 
autocmd FileType tex nnoremap <buffer> <leader>b :exe 'CocCommand latex.Build'<CR>
" forward search
autocmd FileType tex nnoremap <buffer> <leader>fs :w<CR>:silent !/Applications/Skim.app/Contents/SharedSupport/displayline <C-r>=line('.')<CR> %<.pdf<CR>
" linewrapping
augroup WrapLineInTeXFile
    autocmd!
    autocmd FileType tex setlocal textwidth=100
    autocmd FileType tex setlocal colorcolumn=100
augroup END
" }}}

" fzf settings {{{
" don't search filenames, show preview
command! -bang -nargs=* Rg
    \ call fzf#vim#grep('rg --column --line-number --no-heading --color=always --smart-case '
    \ . (len(<q-args>) > 0 ? <q-args> : '""'), 0,
    \ fzf#vim#with_preview({'options': ['--delimiter=:', '--nth=2..', '--layout=reverse', '--info=inline']}), <bang>0)
" silver searcher with leader s
nnoremap <leader>s :Rg<cr>
" }}}

" lf settings {{{
let g:lf_map_keys = 0
map <leader>ff :Lf<CR>
" }}}

" {{{ vim-signify settings
set updatetime=100
" }}}

" autosave settings {{{
let g:auto_save = 0
augroup ft_markdown
  au!
  au FileType tex let b:auto_save = 1
augroup END:
" }}}

" more complex settings {{{ 

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
            \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif
